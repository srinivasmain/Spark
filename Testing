import unittest
from pyspark.sql import SparkSession
from pyspark.sql import functions as F
from pyspark.sql.types import StructType, StructField, StringType, IntegerType
from unittest.mock import patch

# Import your module
from your_module import get_updt_insert_cols_df, get_updt_insert_df  # Replace 'your_module' with the actual module name

class TestGetUpdtInsertColsDf(unittest.TestCase):

    def setUp(self):
        self.spark = SparkSession.builder.master("local[2]").appName("test").getOrCreate()

    def tearDown(self):
        self.spark.stop()

    @patch('your_module.get_updt_insert_df')
    def test_get_updt_insert_cols_df(self, mock_get_updt_insert_df):
        # Sample data for col_details_df
        col_details_data = [
            ("db1", "table1", "col1", 1),
            ("db2", "table2", "col2", 2),
            # Add more sample data as needed
        ]

        col_details_schema = ["databaseName", "tableName", "columnName", "other_column"]

        # Creating a DataFrame for col_details_df
        col_details_df = self.spark.createDataFrame(col_details_data, schema=col_details_schema)

        # Sample data for ast_hierarchy_df
        ast_hierarchy_data = [
            ("db1", "table1", "col1", "AST1"),
            ("db2", "table2", "col2", "AST2"),
            # Add more sample data as needed
        ]

        ast_hierarchy_schema = ["database_name", "table_name", "column_name", "AST_ID"]

        # Creating a DataFrame for ast_hierarchy_df
        ast_hierarchy_df = self.spark.createDataFrame(ast_hierarchy_data, schema=ast_hierarchy_schema)

        # Mocking the return value of get_updt_insert_df
        mock_update_df = self.spark.createDataFrame([], schema=col_details_schema)
        mock_insert_df = self.spark.createDataFrame([], schema=col_details_schema)
        mock_get_updt_insert_df.return_value = mock_update_df, mock_insert_df

        # Calling the function
        update_cols_df, insert_cols_df = get_updt_insert_cols_df(col_details_df, ast_hierarchy_df)

        # Assertions
        mock_get_updt_insert_df.assert_called_once_with(
            col_details_df.join(ast_hierarchy_df,
                                (F.upper(col_details_df['databaseName']) == F.upper(ast_hierarchy_df['database_name'])) &
                                (F.upper(col_details_df['tableName']) == F.upper(ast_hierarchy_df['table_name'])) &
                                (F.upper(col_details_df['columnName']) == F.upper(ast_hierarchy_df['column_name'])),
                                'left')
        )

        # Additional assertions as needed
        # ...

    def test_empty_dataframe_creation(self):
        # Define a sample schema for an empty DataFrame
        sample_schema = StructType([
            StructField("databaseName", StringType(), True),
            StructField("tableName", StringType(), True),
            StructField("columnName", StringType(), True),
            StructField("other_column", IntegerType(), True),
        ])

        # Create an empty DataFrame with the specified schema
        empty_df = self.spark.createDataFrame([], schema=sample_schema)

        # Show the empty DataFrame
        empty_df.show()

        # Add any additional assertions for the empty DataFrame if needed
        self.assertEqual(empty_df.count(), 0)

if __name__ == '__main__':
    unittest.main()
