test_get_table_detail_data_test:

Description:
Test the get_table_details method with sample data.

Steps to execute:

Load properties and get the JSON file path.

python
Copy code
result = load_properties("dcm")
json_filepath = result["read_json"]["json_file_path"]
Create a Spark session and load the sample JSON data into a DataFrame.

python
Copy code
spark = sparkUtil.create_spark_session("spark")
json_df = sparkUtil.create_json_dataframe(spark, json_filepath)
Call the get_table_details method with the sample DataFrame.

python
Copy code
result_df = get_table_details(json_df)
result_df.show()
result_df.printSchema()
Create a DataFrame from the provided sample data.

python
Copy code
sample_data = [("USER", "zscrhl1d", "VIRTUAL_VIEW", "pty_rb_wk", "crh_1h_crhsmn_sec")]
columns_schema = ["OwnerType", "Owner", "TableType", "tableName", "databaseName"]
expected_df = spark.createDataFrame(sample_data, columns_schema)
Assert that the first record of the result DataFrame matches the first record of the expected DataFrame.

python
Copy code
self.assertEqual(
    result_df.select("OwnerType", "Owner", "TableType", "tableName", "databaseName").first(),
    expected_df.select("OwnerType", "Owner", "TableType", "tableName", "databaseName").first()
)
Expected result:

The get_table_details method should process the sample DataFrame correctly.
The schema and content of the result DataFrame should match the expected DataFrame.
Actual result:
The test will output messages, show the schema and content of the result DataFrame, and assert whether the first record matches the expected DataFrame, helping verify the correctness of the get_table_details method.





Message ChatGPTâ€¦

ChatGPT can make mistakes. Consider checking important information.
