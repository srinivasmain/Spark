import pytest
from unittest.mock import patch, MagicMock
from your_module import cluster_level_exec

@pytest.fixture
def mock_spark():
    return MagicMock()

@pytest.fixture
def mock_table_details_df():
    return MagicMock()

@pytest.fixture
def mock_ast_hierarchy_df():
    return MagicMock()

@patch('your_module.sparkUtil.create_cols_specific_db_dataframe')
@patch('your_module.get_updt_insert_df')
@patch('your_module.get_schema_and_tables_ids')
@patch('your_module.write_df_in_assets')
def test_cluster_join_operation(
    mock_write_df_in_assets,
    mock_get_schema_and_tables_ids,
    mock_get_updt_insert_df,
    mock_create_cols_specific_db_dataframe,
    mock_spark,
    mock_table_details_df,
    mock_ast_hierarchy_df
):
    # Mocking necessary dependencies
    mock_spark_util = mock_create_cols_specific_db_dataframe.return_value
    mock_spark_util.select.return_value.collect.return_value = [(123,)]  # Mocking db_ast_typ_id value

    mock_get_updt_insert_df.return_value = (MagicMock(), MagicMock())  # Mocking update and insert DataFrames

    mock_new_cluster_df = MagicMock()
    mock_get_schema_and_tables_ids.return_value.persist.return_value = mock_new_cluster_df

    # Mocking expected return values
    expected_cluster_details_df = MagicMock()
    mock_new_cluster_df.select.return_value.union.return_value = expected_cluster_details_df

    # Calling the function under test
    result_cluster_details_df = cluster_level_exec(mock_spark, mock_table_details_df, mock_ast_hierarchy_df)

    # Assertions
    mock_create_cols_specific_db_dataframe.assert_called_with(mock_spark, "dcm", "db_id_query")
    mock_get_updt_insert_df.assert_called_with(MagicMock().join(), ... )  # Pass appropriate arguments based on your implementation
    mock_get_schema_and_tables_ids.assert_called_with(mock_spark, MagicMock(), "ast_typ_ids", "db_id_by_ast_id_query", "db_id")
    mock_write_df_in_assets.assert_called_with(MagicMock(), "dcm", "asset_table")
    mock_write_df_in_assets.assert_called_with(MagicMock(), "dcm", "asset_database")
    assert result_cluster_details_df == expected_cluster_details_df

# You may need to adjust the import paths and patch targets based on your actual module structure.
